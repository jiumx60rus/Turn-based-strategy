diff --git a/test/jsftp_test.js b/test/jsftp_test.js
index 6921393..3ca99d4 100755
--- a/test/jsftp_test.js
+++ b/test/jsftp_test.js
@@ -6,64 +6,25 @@
  */
 /*global it describe beforeEach afterEach */
 
-"use strict";
+'use strict';
 
-var assert = require("assert");
-var Fs = require("fs");
+var assert = require('assert');
+var Fs = require('fs');
 var exec = require('child_process').spawn;
-var Ftp = require("../");
-var Path = require("path");
-var sinon = require("sinon");
-var EventEmitter = require("events").EventEmitter;
-var ftpServer = require("ftp-test-server");
-var rimraf = require("rimraf");
+var Ftp = require('../');
+var Path = require('path');
+var sinon = require('sinon');
+var EventEmitter = require('events').EventEmitter;
+var ftpServer = require('ftp-test-server');
+var rimraf = require('rimraf');
+var util = require('./util');
 
-var concat = function(bufs) {
-  var buffer, length = 0,
-  index = 0;
 
-  if (!Array.isArray(bufs))
-    bufs = Array.prototype.slice.call(arguments);
-
-  for (var i = 0, l = bufs.length; i < l; i++) {
-    buffer = bufs[i];
-    length += buffer.length;
-  }
-
-  buffer = new Buffer(length);
-
-  bufs.forEach(function(buf) {
-    buf.copy(buffer, index, 0, buf.length);
-    index += buf.length;
-  });
-
-  return buffer;
-};
-
-var concatStream = function(err, socket, callback) {
-  if (err) return callback(err);
-
-  var pieces = [];
-  socket.on("data", function(p) {
-    pieces.push(p);
-  });
-  socket.on("close", function(hadError) {
-    if (hadError)
-      return callback(new Error("Socket connection error"));
-
-    callback(null, concat(pieces));
-  });
-  socket.resume();
-};
-
-// Write down your system credentials. This test suite will use OSX internal
-// FTP server. If you want to test against a remote server, simply change the
-// `host` and `port` properties as well.
 var FTPCredentials = {
-  host: "localhost",
-  user: "user",
+  host: 'localhost',
+  user: 'user',
   port: 3334,
-  pass: "12345"
+  pass: '12345'
 };
 
 function getRemotePath(path) {
@@ -73,39 +34,45 @@ function getRemotePath(path) {
 function getLocalPath(path) {
   return Path.join(process.cwd(), 'test', 'test_c9', path);
 }
-var CWD = process.cwd() + "/test";
-var remoteCWD = "test/test_c9";
-exec('mkdir', [__dirname + "/" + remoteCWD]);
+var CWD = process.cwd() + '/test';
+var remoteCWD = 'test/test_c9';
 
-describe("jsftp test suite", function() {
+exec('mkdir', [__dirname + '/' + remoteCWD]);
+
+describe('jsftp test suite', function() {
   var ftp, server;
+
+  before(function(done) {
+    if (FTPCredentials.host === 'localhost') {
+      server = new ftpServer();
+      server.init(FTPCredentials);
+    }
+    done();
+  });
+
   beforeEach(function(next) {
-    rimraf(getLocalPath(''), function() {
-      Fs.mkdirSync(getLocalPath(''));
-      Fs.writeFileSync(getLocalPath('testfile.txt'), "test");
-      Fs.writeFileSync(getLocalPath('testfile2.txt'), "test2");
-
-      if (FTPCredentials.host === "localhost") {
-        server = new ftpServer();
-        server.init(FTPCredentials);
-      }
+    rimraf.sync(getLocalPath(''));
+    Fs.mkdirSync(getLocalPath(''));
+    Fs.writeFileSync(getLocalPath('testfile.txt'), 'test');
+    Fs.writeFileSync(getLocalPath('testfile2.txt'), 'test2');
 
-      setTimeout(function() {
-        ftp = new Ftp(FTPCredentials);
-        next();
-      }, 100);
-    });
+    ftp = new Ftp(FTPCredentials);
+    next();
   });
 
   afterEach(function(next) {
     setTimeout(function() {
-      server.stop();
       if (ftp) {
         ftp.destroy();
         ftp = null;
       }
+      next();
     }, 50);
-    next();
+  });
+
+  after(function(done) {
+    server && server.stop();
+    done();
   });
 
   it("test initialize bad host", function(next) {
@@ -650,7 +617,7 @@ describe("jsftp test suite", function() {
     var originalData = Fs.readFileSync(path);
     ftp.getGetSocket(getRemotePath("testfile.txt"), function(err, readable) {
       assert.ok(!err);
-      concatStream(err, readable, function(err, buffer) {
+      util.concatStream(err, readable, function(err, buffer) {
         assert.ok(!err);
         assert.equal(buffer.toString(), originalData.toString());
         next();
@@ -675,7 +642,7 @@ describe("jsftp test suite", function() {
       assert.ok(!err);
       originalData.pipe(socket);
       originalData.resume();
-      concatStream(err, originalData, function(err, buffer) {
+      util.concatStream(err, originalData, function(err, buffer) {
         assert.ok(!err);
         Fs.readFile(path, "utf8", function(err, original) {
           assert.equal(buffer.toString("utf8"), original);
@@ -769,19 +736,20 @@ describe("jsftp test suite", function() {
     });
   });
 
-  it("Test handling error on simultaneous PASV requests {#90}", function(next) {
+  it.only("Test handling error on simultaneous PASV requests {#90}", function(next) {
     var file1 = remoteCWD + "/testfile.txt";
     var file2 = remoteCWD + "/testfile2.txt";
 
     var counter = 0;
     var args = [];
     function onDone() {
+console.log(args);
       counter += 1;
       if (counter === 2) {
         assert.ok(args.some(function(arg) {
           return arg && arg.code === 'ECONNREFUSED' && arg.msg ===
             'Probably trying a PASV operation while one is in progress';
-        }));
+        }), arg);
         next();
       }
     }
